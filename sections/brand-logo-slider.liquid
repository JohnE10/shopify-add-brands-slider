<style>
  .parent {
    display: flex;
    overflow: hidden;
    width: 100%;
    align-items: center;
    background-color: var(--parent-background-color, transparent);
    height: var(--parent-height, 100px);
  }

  .scrolling-div {
    width: auto;
    height: auto;
    background-color: transparent;
    display: flex;
    align-items: center;
    animation: var(--scroll-animation);
  }

  {% if section.settings.pause_on_hover %}
  .parent:hover .scrolling-div {
    animation-play-state: paused;
  }
  {% endif %}

  .scrolling-div img {
    margin: 0 var(--image-gap);
    height: var(--image-height, 100px);
    width: auto;
  }

  @keyframes scroll {
    from {
      transform: translateX(0);
    }
    to {
      transform: translateX(-100%);
    }
  }
</style>

<div class="parent" id="parent-{{ section.id }}">
  <div class="scrolling-div" id="scrolling-div-{{ section.id }}"></div>
</div>

<script>
  // Check if the global images array exists
  if (typeof globalImagesArray === 'undefined') {
    var globalImagesArray = {};
  }

  // Initialize the images array for this section
  globalImagesArray["{{ section.id }}"] = [];
</script>

{% for block in section.blocks %}
  <script>
    // Get the image URL from Liquid and push it to the section-specific array
    globalImagesArray["{{ section.id }}"].push("{{ block.settings.image | image_url: height: block.settings.image.height }}");
  </script>
{% endfor %}

<script>
  // Define the runSlider function if it doesn't exist
  if (typeof runSlider === 'undefined') {
    function runSlider(sectionId, imagesArray) {
      const imageWidth = 150;

      const scrollingDiv = document.getElementById(`scrolling-div-${sectionId}`);
      const parentDiv = document.getElementById(`parent-${sectionId}`);

      const numberOfImages = imagesArray.length;
      const screenWidth = screen.width;
      const totalWidth = (imageWidth + 2 * parseInt(getComputedStyle(document.documentElement).getPropertyValue('--image-gap'))) * numberOfImages;

      const actualNumberOfDivsNeeded = Math.floor(screenWidth / totalWidth) + 1;

      console.log({ sectionId, imageGap: getComputedStyle(document.documentElement).getPropertyValue('--image-gap'), totalWidth });

      addImages();

      // Function to add images to the scrolling div
      function addImages() {
        console.log('addImages ran for section:', sectionId);
        console.log('actual number of divs needed:', actualNumberOfDivsNeeded);
        for (let i = 0; i < actualNumberOfDivsNeeded; i++) {
          imagesArray.forEach((imageUrl, index) => {
            const imgElement = document.createElement('img');
            imgElement.src = imageUrl;
            imgElement.alt = `Image ${index + 1}`;
            imgElement.classList.add('image'); // Add class for styling

            scrollingDiv.appendChild(imgElement);
          });
        }
        // duplicate scrolling divs
        const clone = scrollingDiv.cloneNode(true);
        parentDiv.appendChild(clone);
      }
    }
  }

  // Run the slider function for this section
  document.addEventListener('DOMContentLoaded', () => {
    // Set animation speed
    const speed = {{ section.settings.speed }};
    const animation = `scroll ${speed}s linear infinite`;
    document.documentElement.style.setProperty('--scroll-animation', animation);

    // Set image gap
    const imageGap = '{{ section.settings.gap }}';
    document.documentElement.style.setProperty('--image-gap', `${imageGap}px`);

    // Set slider image height
    const imageHeight = '{{ section.settings.image_height }}';
    document.documentElement.style.setProperty('--image-height', `${imageHeight}px`);

    // Set parent background color and height
    const backgroundColor = '{{ section.settings.background }}';
    const parentHeight = '{{ section.settings.parent_height }}';
    document.documentElement.style.setProperty('--parent-background-color', backgroundColor);
    document.documentElement.style.setProperty('--parent-height', `${parentHeight}px`);

    runSlider("{{ section.id }}", globalImagesArray["{{ section.id }}"]);
  });
</script>

{% schema %}
  {
    "name": "Brand Logo Slider",
    "settings": [
      {
        "type": "color",
        "id": "background",
        "label": "Slider Background Color",
        "default": "transparent"
      },
      {
        "type": "range",
        "id": "parent_height",
        "label": "Slider Background Height (50 - 1000)",
        "min": 50,
        "max": 1000,
        "step": 10,
        "unit": "px",
        "default": 50
      },
      {
        "type": "range",
        "id": "image_height",
        "label": "Slider Image Height (50 - 1000)",
        "min": 50,
        "max": 1000,
        "step": 10,
        "unit": "px",
        "default": 50
      },
      {
        "type": "range",
        "id": "gap",
        "label": "Gap Between Images (0 - 100)",
        "min": 0,
        "max": 100,
        "step": 10,
        "unit": "px",
        "default": 0
      }, 
      {
        "type": "range",
        "id": "speed",
        "label": "Slider Speed (0 - 50)",
        "min": 0,
        "max": 50,
        "unit": "s",
        "step": 5,
        "default": 0
      }, 
      {
        "type": "checkbox",
        "id": "pause_on_hover",
        "label": "Pause Slider on Hover",
        "default": true
      }
    ],
    "blocks": [
      {
        "type": "logo",
        "name": "Logo",
        "settings": [
          {
            "type": "image_picker",
            "id": "image",
            "label": "Logo Image"
          }, {
            "type": "text",
            "id": "alt_text",
            "label": "Alt Text"
          }
        ]
      }
    ],
    "presets": [
      {
        "name": "Brand Logo Slider",
        "category": "Custom"
      }
    ]
  }
{% endschema %}
